diff --git a/Johannseniteproba/.circleci/config.yml b/Johannseniteproba/.circleci/config.yml
new file mode 100644
index 0000000..5f0c513
--- /dev/null
+++ b/Johannseniteproba/.circleci/config.yml
@@ -0,0 +1,37 @@
+version: 2
+jobs:
+  build:
+    working_directory: ~/repo
+
+    docker:
+      - image: circleci/openjdk:8-jdk
+
+    environment:
+      JVM_OPTS: -Xmx3200m
+      TERM: dumb
+    
+    steps:
+      - checkout
+
+      - restore_cache:
+          keys:
+          - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
+          - v1-gradle-cache-{{ checksum "build.gradle" }}
+
+      - save_cache:
+          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
+          paths:
+            - ~/.gradle/wrapper
+      - save_cache:
+          key: v1-gradle-cache-{{ checksum "build.gradle" }}
+          paths:
+            - ~/.gradle/caches
+
+      - run: gradle checkstyleMain
+      - run: gradle checkstyleTest
+      - run: gradle build -x test -x checkstyleMain -x checkStyleTest
+      - run: gradle test
+      - run: gradle jacocoTestReport
+
+      - store_artifacts:
+          path:  build/jacoco
diff --git a/Johannseniteproba/.gitignore b/Johannseniteproba/.gitignore
new file mode 100644
index 0000000..5052305
--- /dev/null
+++ b/Johannseniteproba/.gitignore
@@ -0,0 +1,28 @@
+# Compiled class file
+*.class
+
+# Log file
+*.log
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
+*.idea
+out/
+.gradle/
+build/
diff --git a/Johannseniteproba/CODEOWNERS b/Johannseniteproba/CODEOWNERS
new file mode 100644
index 0000000..02bce89
--- /dev/null
+++ b/Johannseniteproba/CODEOWNERS
@@ -0,0 +1 @@
+* @johnyka
\ No newline at end of file
diff --git a/Johannseniteproba/CONTRIBUTING.md b/Johannseniteproba/CONTRIBUTING.md
new file mode 100644
index 0000000..55da585
--- /dev/null
+++ b/Johannseniteproba/CONTRIBUTING.md
@@ -0,0 +1,47 @@
+# Contributing to the project
+
+## Restricted branches
+- `development` - all the implemented features which are done and deployed
+- `master` - stable version deployed
+
+## Workflow
+
+1. Create a feature branch when you start to work on a story and commit your changes to this 
+2. Push this frequently to the remote repository from your local
+2. When the feature is done, create a Pull Request from the `feature_branch` to `development`, follow the guidelines
+3. When the PR is approved, merge it, and delete your feature branch
+
+## Git Commit Guidelines
+
+Read this article how to write meaningful commit messages:
+[How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)
+
+With the expectations listed below, we follow the rules contained in
+[Angular.js's Git Commit Guidelines](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits):
+
+ -  **Type**: Must be one of the following
+     -  **feat**: A new feature implementation
+     -  **fix**: A bug fix
+     -  **refactor**: A code change that neither fixes a bug nor adds a feature
+     -  **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation
+     
+ -  Consider starting the commit message with an applicable emoji:
+    * :art: `:art:` when improving the format/structure of the code
+    * :racehorse: `:racehorse:` when improving performance
+    * :non-potable_water: `:non-potable_water:` when plugging memory leaks
+    * :memo: `:memo:` when writing docs
+    * :penguin: `:penguin:` when fixing something on Linux
+    * :apple: `:apple:` when fixing something on macOS
+    * :checkered_flag: `:checkered_flag:` when fixing something on Windows
+    * :bug: `:bug:` when fixing a bug
+    * :fire: `:fire:` when removing code or files
+    * :green_heart: `:green_heart:` when fixing the CI build
+    * :white_check_mark: `:white_check_mark:` when adding tests
+    * :lock: `:lock:` when dealing with security
+    * :arrow_up: `:arrow_up:` when upgrading dependencies
+    * :arrow_down: `:arrow_down:` when downgrading dependencies
+
+## Pull Request guidelines
+
+- From `feature_branch` to `development`: add all developers and PM as reviewers, 2 approves needed for merging
+- From `development` to `master`: this is managed by the PM
diff --git a/Johannseniteproba/README.md b/Johannseniteproba/README.md
new file mode 100644
index 0000000..f034339
--- /dev/null
+++ b/Johannseniteproba/README.md
@@ -0,0 +1,63 @@
+# Spring Basic Project
+
+## Game logic parameters
+|        |Building time   ||Building cost       ||HP     |Effect                                                         |
+|--------|-------|---------|--------|------------|-------|---------------------------------------------------------------|
+|        |Level 1|Level n  |Level 1 |Level n     |Level n|Level n                                                        |
+|Townhall|2:00   |n * 1:00 |200 gold|n * 200 gold|n * 200|can build level n buildings                                    |
+|Farm    |1:00   |n * 1:00 |100 gold|n * 100 gold|n * 100|+(n * 5) + 5 food / minute                                     |
+|Mine    |1:00   |n * 1:00 |100 gold|n * 100 gold|n * 100|+(n * 5) + 5 gold / minute                                     |
+|Academy |1:30   |n * 1:00 |150 gold|n * 100 gold|n * 150|can build level n troops                                       |
+|Troop   |0:30   |n * 0:30 |25 gold |n * 25 gold |n * 20 |-(n * 5) food / minute<br>+(n * 10) attack<br>+(n * 5) defense |
+
+
+## Dependencies
+
+- Java Development Kit - JDK 8.0
+
+## Steps
+
+- Create a new repository on Github and select `green-fox-academy/basic-spring-project` as the repository template
+- OR Click the `Use this template` button at the top of the page
+  - in order to initialize project team repo follow the project naming convention: https://docs.google.com/spreadsheets/d/1vdqn4i0GYWNDHL96jrNrXOZJJ6lQsN-_m3aFHGjOmng
+- Add a new project on [CircleCi](https://onboarding.circleci.com/project-dashboard/github/green-fox-academy) with your new repository
+
+## Git Workflow
+
+### Day Start
+
+Use `git fetch` in order to retrieve the most recent commits from GitHub.
+
+### Start New Feature/Bugfix
+
+In order to minimize merge conflicts later always open a new feature branch from the most recent state of the `development` branch on GitHub.
+
+- `git fetch`
+- `git checkout -b <branch_name> origin/development`
+
+### Update Feature Branch
+
+While you're working on your own feature/bugfix other developers make changes on `development` and it's required to update your branch to keep consistency of the codebase. You can do this in 2 ways.
+
+[`git merge` vs `git rebase`](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)
+
+#### Rebase
+
+[`git rebase`](https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase)
+
+Rebase rewrites commit history; therefore, do not use rebase on the `master` and `development` branches.
+On the other hand feel free to use rebase on your own branches.
+
+Use `git rebase development` while on your branch.
+
+#### Merge
+
+[`git merge`](https://www.atlassian.com/git/tutorials/using-branches/git-merge)
+
+This creates a new commit (so called merge commit) containing changes from both your branch and the development branch.
+
+Use `git merge development` while on your branch.
+
+### Commit and Push
+
+You can work on your feature/bugfix separately but sometimes you may need to merge another branch into your branch (i.e. to try out your feature). In order to have clean workflow (and pull requests) always commit only feature related modifications. This is harder to reset files or hunks later.
diff --git a/Johannseniteproba/build.gradle b/Johannseniteproba/build.gradle
new file mode 100644
index 0000000..b036572
--- /dev/null
+++ b/Johannseniteproba/build.gradle
@@ -0,0 +1,50 @@
+plugins {
+    id 'org.springframework.boot' version '2.2.5.RELEASE'
+    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
+    id 'java'
+}
+
+apply plugin: 'checkstyle'
+apply plugin: 'jacoco'
+
+group = 'com.greenfoxacademy'
+version = '0.0.1-SNAPSHOT'
+sourceCompatibility = '8'
+
+configurations {
+    developmentOnly
+    runtimeClasspath {
+        extendsFrom developmentOnly
+    }
+}
+
+checkstyle {
+    toolVersion "8.18"
+}
+
+jacocoTestReport {
+    reports {
+        xml.enabled false
+        html.enabled true
+        html.destination file("${buildDir}/jacoco")    }
+}
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+    implementation 'org.springframework.boot:spring-boot-starter-web'
+    developmentOnly 'org.springframework.boot:spring-boot-devtools'
+    testImplementation('org.springframework.boot:spring-boot-starter-test')
+    compileOnly 'org.projectlombok:lombok'
+    runtimeOnly 'mysql:mysql-connector-java'
+    testCompile group: 'com.h2database', name: 'h2'
+    runtime group: 'com.h2database', name: 'h2'
+
+}
+
+test {
+    useJUnitPlatform()
+}
diff --git a/Johannseniteproba/docs/api-spec.md b/Johannseniteproba/docs/api-spec.md
new file mode 100644
index 0000000..8fc4dda
--- /dev/null
+++ b/Johannseniteproba/docs/api-spec.md
@@ -0,0 +1,558 @@
+# Tribes of Lagopus API specification
+- [Project description](https://github.com/greenfox-academy/teaching-materials/tree/master/team-project/tribes-of-lagopus)
+- [Model descriptions](https://github.com/greenfox-academy/teaching-materials/tree/master/team-project/tribes_models.md)
+
+## Mandatory request header parameter to all endpoints except the `/register` and `/login`:
+`X-tribes-token=<token>`
+
+
+## Registration
+
+### `POST /register`
+Creates a new User.
+
+#### Request parameters
+- `username` [String]
+- `password` [String, optional]
+- `kingdom` [String, optional, defaults to "`username`'s kingdom"]
+
+
+e.g.:
+```json
+{
+  "username" : "Bond",
+  "password" : "password123",
+  "kingdom" : "MI6"
+}
+
+```
+
+#### Response
+- if all required parameters provided, returns a `HTTP 200` status with a mock `User` object:
+```json
+{
+  "id" : 1,
+  "username" : "Bond",
+  "kingdomId" : 1
+}
+```
+
+- if all required parameter provided, but username equals "occupiedUserName", it returns a `HTTP 409` status and the following error message:
+```json
+{
+  "status" : "error",
+  "error" : "Username already taken, please choose an other one."
+}
+```
+
+- if a required parameter is missing, returns a `HTTP 400` status with the following message:
+```json
+{
+  "status" : "error",
+  "message" : "Missing parameter(s): username!"
+}
+```
+
+## Login
+Authenticates a user.
+
+### `POST /login`
+
+#### Request parameters
+- `username` [String]
+- `password` [String, optional]
+
+
+e.g.:
+```json
+{
+  "username" : "Bond",
+  "password" : "password123"
+}
+```
+
+#### Response
+- if all parameters are provided and username equals "Bond", it returns a `HTTP 200` status with a mock `User` object:
+```json
+{
+  "status" : "ok",
+  "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
+}
+```
+
+- if all parameters are provided and username doesn't equals "Bond", it returns a `HTTP 401` status with the following message:
+```json
+{
+  "status" : "error",
+  "message" : "No such user: <username>!"
+}
+```
+
+- if all parameters are provided and password doesn't equals "password123", it returns a `HTTP 401` status with the following message:
+```json
+{
+  "status" : "error",
+  "message" : "Wrong password!"
+}
+```
+
+- if a required parameter is missing, returns a `HTTP 400` status with the following message:
+```json
+{
+  "status" : "error",
+  "message" : "Missing parameter(s): <comma separated list of missing parameters>!"
+}
+```
+
+## Kingdom
+
+### `GET /kingdom`
+Gets all data of a kingdom that belongs to the user encoded in the token.
+
+#### Response
+- if the token is valid, it returns a `HTTP 200` status with the `Kingdom` object of the user
+
+### `GET /kingdom/[userId]`
+Gets all data of a kingdom that belongs to the given userId.
+
+#### Response
+- if userId is an existing userId, it returns a `HTTP 200` status with the `Kingdom` object of the user:
+```json
+{
+  "id" : 1,
+  "name" : "London",
+  "userId" : 1,
+  "buildings": [
+    {
+      "id" : 1,
+      "type" : "townhall",
+      "level": 1,
+      "hp": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }
+  ],
+  "resources": [
+    {
+      "type" : "food",
+      "amount": 1,
+      "generation": 1
+    },
+    {
+      "type" : "gold",
+      "amount": 1,
+      "generation": 1
+    }
+  ],
+  "troops": [
+    {
+      "id": 1,
+      "level": 1,
+      "hp": 1,
+      "attack": 1,
+      "defence": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }
+  ],
+  "location": {
+    "x": 1,
+    "y": 1
+  }
+}
+```
+
+- if userId doesn't exist, it returns a `HTTP 404` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "UserId not found"
+}
+```
+
+### `PUT /kingdom`
+Modifies data of a kingdom belongs to the user encoded in the token.
+
+#### Request parameters (all optional)
+- `name` [String]
+- `locationX` [int]
+- `locationY` [int]
+
+
+e.g.:
+```json
+{
+  "name" : "MI5"
+}
+```
+
+#### Response
+- if the token is valid, it returns a `HTTP 200` status with the `Kingdom` object of the user:
+```json
+{
+  "id" : 1,
+  "name" : "London",
+  "userId" : 1,
+  "buildings": [
+    {
+      "id" : 1,
+      "type" : "townhall",
+      "level": 1,
+      "hp": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }
+  ],
+  "resources": [{
+      "type" : "food",
+      "amount": 1,
+      "generation": 1
+    }, {
+      "type" : "gold",
+      "amount": 1,
+      "generation": 1
+    }
+  ],
+  "troops": [
+    {
+      "id": 1,
+      "level": 1,
+      "hp": 1,
+      "attack": 1,
+      "defence": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }
+  ],
+  "location": {
+    "x": 1,
+    "y": 1
+  }
+}
+```
+
+## Buildings
+
+### `GET /kingdom/buildings`
+Get the list of buildings of the kingdom belongs to the user encoded in the token.
+
+#### Response
+- if token is valid, it returns a `HTTP 200` status with the list of `Building` objects of the user:
+```json
+{
+  "buildings" : [{
+      "id" : 1,
+      "type" : "townhall",
+      "level": 1,
+      "hp": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }, {
+      "id" : 2,
+      "type" : "farm",
+      "level": 1,
+      "hp": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }
+  ]
+}
+```
+
+### `GET /kingdom/buildings/[buildingId]`
+Get the details of the certain building belongs to the user encoded in the token.
+
+#### Response
+
+- if token is valid and buildingId is an existing ids, it returns a `HTTP 200` status with a `Building` object:
+```json
+{
+  "id" : 1,
+  "type" : "townhall",
+  "level": 1,
+  "hp": 1,
+  "started_at": 12345789,
+  "finished_at": 12399999
+}
+```
+
+- if buildingId doesn't exist, it returns a `HTTP 404` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "<id> not found"
+}
+```
+
+### POST /kingdom/buildings
+Creates a new building in the kingdom belongs to the user encoded in the token
+
+#### Request parameters
+- `type` [String, farm|mine|barracks]
+
+e.g.:
+```json
+{
+  "type" : "farm"
+}
+```
+
+#### Response
+
+- if type parameter is provided and it's a valid building type (farm|mine|barracks), it returns a `HTTP 200` response with a mock `Building` object:
+```json
+{
+  "id" : 2,
+  "type" : "farm",
+  "level": 1,
+  "hp": 1,
+  "started_at": 12345789,
+  "finished_at": 12399999
+}
+```
+
+- if type parameter is provided, but it's not a valid building type (farm|mine|barracks), it returns a `HTTP 400` response with the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Invalid building type!"
+}
+```
+
+- if type parameter is missing, it returns a `HTTP 400` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Missing parameter(s): type!"
+}
+```
+
+
+### PUT /kingdom/buildings/[buildingId]
+Upgrades or downgrades a building in the kingdom to a certain level
+
+#### Request parameters
+- `level` [int]
+
+#### Response
+
+- if level parameter is provided and it's more than 0 and the user has enough money for the upgrade, it returns a `HTTP 200` response with a mock `Building` object:
+```json
+{
+  "id" : 2,
+  "type" : "farm",
+  "level": 1,
+  "hp": 1,
+  "started_at": 12345789,
+  "finished_at": 12399999
+}
+```
+
+- if level parameter is provided and it's more than 0 BUT the user doesn't have enough money for the upgrade, it returns a `HTTP 400` response with the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Not enough gold!"
+}
+```
+
+
+- if level parameter is provided, but it's less then 0 or not integer, it returns a `HTTP 400` response with the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Invalid building level!"
+}
+```
+
+- if level parameter is missing, it returns a `HTTP 400` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Missing parameter(s): type!"
+}
+```
+
+
+## Resources
+
+### `GET /kingdom/resources`
+Get the list of resources of the kingdom
+
+#### Response
+- if token is valid, it returns a `HTTP 200` status with a mock list of `Resource` objects:
+```json
+{
+  "resources": [{
+      "type" : "food",
+      "amount": 1,
+      "generation": 1
+    }, {
+      "type" : "gold",
+      "amount": 1,
+      "generation": 1
+    }
+  ]
+}
+```
+
+
+### GET /kingdom/resources/[resourceType]
+Get the details of a certain resource type
+
+#### Response
+
+- if token is valid and resourceType is a valid resource type, it returns a `HTTP 200` status with a mock `Resource` object:
+```json
+{
+  "type" : "gold",
+  "amount": 1,
+  "generation": 1
+}
+```
+
+- if resource type doesn't exist, it returns a `HTTP 404` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "<parameter> not found"
+}
+```
+
+## Troops
+
+### `GET /kingdom/troops`
+Get the list of troops in the kingdom
+
+#### Response
+- if token is valid, it returns a `HTTP 200` status with a mock list of `Troop` objects:
+```json
+{
+  "troops": [
+    {
+      "id": 1,
+      "level": 1,
+      "hp": 1,
+      "attack": 1,
+      "defence": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }, {
+      "id": 2,
+      "level": 1,
+      "hp": 1,
+      "attack": 1,
+      "defence": 1,
+      "started_at": 12345789,
+      "finished_at": 12399999
+    }
+  ]
+}
+```
+
+
+### GET /kingdom/troops/[troopId]
+Get the detail of a certain troop
+
+#### Response
+
+- if token is valid and troopId is an existing ids, it returns a `HTTP 200` status with a mock `Troop` object:
+```json
+{
+  "id": 1,
+  "level": 1,
+  "hp": 1,
+  "attack": 1,
+  "defence": 1,
+  "started_at": 12345789,
+  "finished_at": 12399999
+}
+```
+
+- if troopId doesn't exist, it returns a `HTTP 404` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "<id> not found"
+}
+```
+
+### POST /kingdom/troops
+Creates a new troop in the kingdom (gets the user's id from the token provided in the header).
+
+#### Response
+
+- if the token is valid, and the user has enough gold to create a troop, it returns a `HTTP 200` response with the create `Troop` object:
+```json
+{
+  "id": 1,
+  "level": 1,
+  "hp": 1,
+  "attack": 1,
+  "defence": 1,
+  "started_at": 12345789,
+  "finished_at": 12399999
+}
+```
+
+- if the user doesn't have enough money for the create a troop, it returns a `HTTP 400` response with the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Not enough gold!"
+}
+```
+
+### PUT /kingdom/troops/[troopId]
+Upgrades or downgrades a troop in the kingdom to a certain level (gets the user's id from the token provided in the header).
+
+#### Request parameters
+- `level` [int]
+
+#### Response
+
+- if level parameter is provided and it's more than 0 and the user has enough money for the upgrade, it returns a `HTTP 200` response with the modified `Troop` object:
+```json
+{
+  "id": 1,
+  "level": 2,
+  "hp": 1,
+  "attack": 1,
+  "defence": 1,
+  "started_at": 12345789,
+  "finished_at": 12399999
+}
+```
+
+- if level parameter is provided and it's more than 0 BUT the user doesn't have enough money for the upgrade, it returns a `HTTP 400` response with the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Not enough gold!"
+}
+```
+
+
+- if level parameter is provided, but it's less then 0 or not integer, it returns a `HTTP 400` response with the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Invalid troop level!"
+}
+```
+
+- if level parameter is missing, it returns a `HTTP 400` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "Missing parameter(s): type!"
+}
+```
+
+- if troopId doesn't exist, it returns a `HTTP 404` status and the following error message:
+```json
+{
+  "status" : "error",
+  "message" : "<id> not found"
+}
+```
diff --git a/Johannseniteproba/docs/models.md b/Johannseniteproba/docs/models.md
new file mode 100644
index 0000000..1122741
--- /dev/null
+++ b/Johannseniteproba/docs/models.md
@@ -0,0 +1,103 @@
+# Tribes Models
+
+## Building
+```json
+{
+  "id": <long>,
+  "type": townhall|mine|farm|barracks>,
+  "level": <int>,
+  "hp": <int>,
+  "started_at": <long>,
+  "finished_at": <long>
+}
+```
+- id: unique identifier of the building
+- type: type of the building. The available building types:
+	- townhall: only one townhall allowed in a `Kingdom`. Certain townhall level needs for other building level upgrades
+	- mine: produces gold
+	- farm: produces food
+	- barracks: can create `Troop`
+- level: level of the building (default: 1)
+- hp: health point of the building
+- started_at: the timestamp when the building create request was sent from the client
+- finished_at: (could be future) timestamp when the building is finished and useable
+
+## Troop
+```json
+{
+  "id": <long>,
+  "level": <int>,
+  "hp": <int>,
+  "attack": <int>,
+  "defence": <int>,
+  "started_at": <long>,
+  "finished_at": <long>
+}
+```
+- id: unique identifier of the troop
+- level: level of the troop (default: 1)
+- hp: health point of the troop
+- attack: attack value of the troop
+- defence: defence value of the troop
+- started_at: the timestamp when the troop training request was sent from the client
+- finished_at: (could be future) timestamp when the troop's training is finished and useable
+
+
+## Resource
+```json
+{
+  "type": <food|gold>,
+  "amount": <int>,
+  "generation": <int>
+}
+```
+- type: type of the resource. The available types>
+	- food: needs for the `Troop`s for living
+	- gold: needs for buying new `Building`s or `Troop`s
+- amount: sum amount of the certain resource type in `Kingdom` (default 0)
+- generation: amount of certain resource automatic generation per minute. Food is produced by farms, gold is produced by mines.
+
+
+## Player (user)
+```json
+{
+  "id": <long>,
+  "username": <string>,
+  "kingdomId": <long>
+}
+```
+- id: unique identifier of the user
+- username: unique name of the user
+- kingdomId: the id of the user's `Kingdom`. One user can have only one Kingdom.
+- avatar: URL of the user's uploaded avatar image. Can be null if it's not uploaded yet.
+- points: the user's sum game points (default 0)
+
+## Location
+```json
+{
+  "x": 1,
+  "y": 1
+}
+```
+- the kingdom's `x` location on the map
+- the kingdom's `y` location on the map
+
+## Kingdom
+```json
+{
+  "id" : <long>,
+  "name" : <string>,
+  "userId": <long>,
+  "buildings": [list of `Building` objects],
+  "resources": [list of `Resource` objects],
+  "troops": [list of `Troop` objects],
+  "location": <`Location` object>
+}
+```
+- id: the unique identifier of the kingdom
+- name: the name of the kingdom
+- userId: the unique identifier of the user who owns this kingdom
+- buildings: the list of `Building` objects found in this kingdom
+- resources: the list of `Resource` objects of this kingdom. A kingdom could have maximum one food type and one gold type resources.
+- troops: the list of `Troop` objects in this kingdom (default empty)
+- location: a `Location` object, that stores the coordinate of the kingdom on the map. Can be null if the kingdom is not settled yet.
diff --git a/Johannseniteproba/docs/rules.md b/Johannseniteproba/docs/rules.md
new file mode 100644
index 0000000..27ad440
--- /dev/null
+++ b/Johannseniteproba/docs/rules.md
@@ -0,0 +1,26 @@
+# Tribes
+
+## Rules
+
+### Resources (per minute?, max level?)
+- `townhall` generates 10 food + 10 gold per level per minute, can store 1000 food and 1000 gold per level
+- `mine` generates 10 gold per level per minute
+- `farm` generates 10 food per level per minute
+- `troop` eats 1 food per minute
+
+### Troops
+- You can buy troops in `barracks` for 10 gold, hp: 10*`barracks lvl` att: 1 def: 1
+- Training troops cost 5 gold, the trained troop gain +1 attack or +1 defence
+- Queue troops training *optional*: buying or training a troop take 1 minute, 1 barrack can upgrade/create only one per level at a time
+
+### Buildings
+- A new building costs 250 gold, upgrading one costs 100*lvl gold
+- Upgrading to a certain level is allowed only if the `townhall` already reached that level (max `townhall` level = 20)
+- Buildings can have rules to make new content available achieving specific level:
+	- Resource generation value increased after upgrade
+	- After Barracks upgrade:
+		- *optional:* Training queue limit can be increased every 5 levels
+		- Defensive buildings have higher attack and defend value after upgrade (incereases by 1 every level)
+	- After townhall upgrade:
+		- New upgrades are available for other buildings (max level of other buildings is the level of the town hall)
+		- Storage limit is higher
diff --git a/Johannseniteproba/gradle/wrapper/gradle-wrapper.properties b/Johannseniteproba/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..4fa90aa
--- /dev/null
+++ b/Johannseniteproba/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Mon Aug 17 15:45:08 CEST 2020
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.2.2-all.zip
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStorePath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
diff --git a/Johannseniteproba/gradlew b/Johannseniteproba/gradlew
new file mode 100644
index 0000000..2fe81a7
--- /dev/null
+++ b/Johannseniteproba/gradlew
@@ -0,0 +1,183 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
diff --git a/Johannseniteproba/gradlew.bat b/Johannseniteproba/gradlew.bat
new file mode 100644
index 0000000..62bd9b9
--- /dev/null
+++ b/Johannseniteproba/gradlew.bat
@@ -0,0 +1,103 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/Johannseniteproba/settings.gradle b/Johannseniteproba/settings.gradle
new file mode 100644
index 0000000..932e266
--- /dev/null
+++ b/Johannseniteproba/settings.gradle
@@ -0,0 +1,6 @@
+pluginManagement {
+    repositories {
+        gradlePluginPortal()
+    }
+}
+rootProject.name = 'spring-webapp'
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/SpringWebappApplication.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/SpringWebappApplication.java
new file mode 100644
index 0000000..a4bab80
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/SpringWebappApplication.java
@@ -0,0 +1,13 @@
+package com.greenfoxacademy.springwebapp;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class SpringWebappApplication {
+
+  public static void main(String[] args) {
+    SpringApplication.run(SpringWebappApplication.class, args);
+  }
+
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/controllers/HelloController.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/controllers/HelloController.java
new file mode 100644
index 0000000..8e2ea19
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/controllers/HelloController.java
@@ -0,0 +1,24 @@
+package com.greenfoxacademy.springwebapp.controllers;
+
+import com.greenfoxacademy.springwebapp.services.HelloService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/api")
+public class HelloController {
+
+  private HelloService helloService;
+
+  @Autowired
+  public HelloController(HelloService helloService) {
+    this.helloService = helloService;
+  }
+
+  @GetMapping("/hello")
+  public String helloWorld() {
+    return helloService.getHelloWorld();
+  }
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Academy.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Academy.java
new file mode 100644
index 0000000..b5c4fba
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Academy.java
@@ -0,0 +1,15 @@
+package com.greenfoxacademy.springwebapp.model;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+
+@Entity
+public class Academy extends Building{
+
+    public Academy() {
+
+    }
+}
+
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Building.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Building.java
new file mode 100644
index 0000000..868e652
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Building.java
@@ -0,0 +1,79 @@
+package com.greenfoxacademy.springwebapp.model;
+
+import javax.persistence.*;
+
+@Entity
+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
+public class Building {
+    @Id
+    @GeneratedValue(strategy = GenerationType.AUTO)
+    private Long Id;
+
+    private Integer level;
+    private Integer hp;
+    private long started_at;
+    private long finished_at;
+    private Long kingdom_id;
+
+
+    public Building() {
+    }
+
+    public Building(Integer level, Integer hp, Long started_at, Long finished_at) {
+        this.level = 1;
+        this.hp = hp;
+        this.started_at = started_at;
+        this.finished_at = finished_at;
+
+    }
+    public Long getId(){
+        return Id;
+    }
+
+
+    public Integer getLevel() {
+        return level;
+    }
+
+    public void setLevel(Integer level) {
+        this.level = level;
+    }
+
+    public Integer getHp() {
+        return hp;
+    }
+
+    public void setHp(Integer hp) {
+        this.hp = hp;
+    }
+
+    public Long getStarted_at() {
+        return started_at;
+    }
+
+    public void setStarted_at(Long started_at) {
+        this.started_at = started_at;
+    }
+
+    public Long getFinished_at() {
+        return finished_at;
+    }
+
+    public void setFinished_at(Long finished_at) {
+        this.finished_at = finished_at;
+    }
+
+
+}
+
+// id: unique identifier of the building
+// type: type of the building. The available building types:
+// townhall: only one townhall allowed in a Kingdom. Certain townhall level needs for other building level upgrades
+// mine: produces gold
+// farm: produces food
+// barracks: can create Troop
+// level: level of the building (default: 1)
+// hp: health point of the building
+// started_at: the timestamp when the building create request was sent from the client
+// finished_at: (could be future) timestamp when the building is finished and useable
+
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/BuildingType.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/BuildingType.java
new file mode 100644
index 0000000..5f4d287
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/BuildingType.java
@@ -0,0 +1,8 @@
+package com.greenfoxacademy.springwebapp.model;
+
+public enum BuildingType {
+    townhall,
+    mine,
+    farm,
+    academy,
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Farm.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Farm.java
new file mode 100644
index 0000000..fa339cc
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Farm.java
@@ -0,0 +1,11 @@
+package com.greenfoxacademy.springwebapp.model;
+
+import javax.persistence.Entity;
+
+@Entity
+public class Farm extends Building {
+
+    public Farm() {
+        System.out.println("Created");
+    }
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Mine.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Mine.java
new file mode 100644
index 0000000..4542fc2
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Mine.java
@@ -0,0 +1,15 @@
+package com.greenfoxacademy.springwebapp.model;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+
+@Entity
+public class Mine extends Building{
+
+
+    public Mine() {
+
+    }
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Townhall.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Townhall.java
new file mode 100644
index 0000000..9c44154
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/model/Townhall.java
@@ -0,0 +1,13 @@
+package com.greenfoxacademy.springwebapp.model;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+@Entity
+public class Townhall extends Building{
+
+    public Townhall() {
+
+    }
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/repository/BuildingRepository.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/repository/BuildingRepository.java
new file mode 100644
index 0000000..538c681
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/repository/BuildingRepository.java
@@ -0,0 +1,13 @@
+package com.greenfoxacademy.springwebapp.repository;
+
+import com.greenfoxacademy.springwebapp.model.Building;
+import com.greenfoxacademy.springwebapp.model.Farm;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface BuildingRepository extends CrudRepository<Building, Long> {
+//public interface BuildingRepository extends CrudRepository<Farm, Long> {
+
+
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingFactory.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingFactory.java
new file mode 100644
index 0000000..c9f5162
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingFactory.java
@@ -0,0 +1,24 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import com.greenfoxacademy.springwebapp.model.*;
+
+public class BuildingFactory {
+
+  public Building createBuilding(BuildingType type) {
+    if (type == BuildingType.farm) {
+      return new Farm();
+    } else if (type == BuildingType.townhall) {
+      return new Townhall();
+    } else if (type == BuildingType.mine) {
+      return new Mine();
+    }
+    else if (type == BuildingType.academy) {
+      return new Academy();
+    } else return null;
+  }
+}
+
+
+
+
+
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingService.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingService.java
new file mode 100644
index 0000000..8274220
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingService.java
@@ -0,0 +1,17 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import com.greenfoxacademy.springwebapp.model.*;
+
+import org.springframework.stereotype.Service;
+
+public interface BuildingService {
+    void startBuilding(Building building);
+    void finishBuilding(Building building, long duration);
+    long saveTownhall(Townhall townhall);
+    long saveMine(Mine mine);
+    long saveFarm(Farm farm);
+    long saveAcademy(Academy academy);
+    long saveBuilding(Building building);
+    Building findBuildingById(Long Id);
+
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingServiceImpl.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingServiceImpl.java
new file mode 100644
index 0000000..07c5126
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/BuildingServiceImpl.java
@@ -0,0 +1,64 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import com.greenfoxacademy.springwebapp.model.*;
+import com.greenfoxacademy.springwebapp.repository.BuildingRepository;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.Optional;
+
+
+@Service
+public class BuildingServiceImpl implements BuildingService {
+
+    @Autowired
+    private BuildingRepository buildingRepository;
+
+
+    public void startBuilding(Building building){
+
+        building.setStarted_at(System.currentTimeMillis());
+        System.out.println(building.getStarted_at());
+
+
+        System.out.println("Time");
+    }
+
+    public void finishBuilding(Building building, long duration){
+
+        building.setFinished_at(building.getStarted_at() + duration);
+        System.out.println(building.getFinished_at());
+    }
+
+
+    public long saveTownhall(Townhall townhall){
+        buildingRepository.save(townhall);
+        return townhall.getId();
+    }
+
+    public long saveMine(Mine mine){
+        buildingRepository.save(mine);
+        return mine.getId();
+    }
+
+    public long saveFarm(Farm farm){
+        buildingRepository.save(farm);
+        return farm.getId();
+    }
+
+    public long saveAcademy(Academy academy){
+        buildingRepository.save(academy);
+        return academy.getId();
+    }
+
+    public long saveBuilding(Building building){
+        buildingRepository.save(building);
+        return building.getId();
+    }
+
+    public Building findBuildingById(Long Id){
+        Optional<Building> building = buildingRepository.findById(Id);
+        return building.orElse(null);
+    }
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/HelloService.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/HelloService.java
new file mode 100644
index 0000000..807b049
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/HelloService.java
@@ -0,0 +1,6 @@
+package com.greenfoxacademy.springwebapp.services;
+
+public interface HelloService {
+
+  String getHelloWorld();
+}
diff --git a/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java
new file mode 100644
index 0000000..e59179f
--- /dev/null
+++ b/Johannseniteproba/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java
@@ -0,0 +1,11 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class HelloServiceImpl implements HelloService {
+
+  public String getHelloWorld() {
+    return "Hello World!";
+  }
+}
diff --git a/Johannseniteproba/src/main/resources/application.properties b/Johannseniteproba/src/main/resources/application.properties
new file mode 100644
index 0000000..4e3785f
--- /dev/null
+++ b/Johannseniteproba/src/main/resources/application.properties
@@ -0,0 +1,9 @@
+spring.datasource.url=jdbc:mysql://localhost/johannsenite?serverTimezone=UTC
+spring.datasource.username=root
+spring.datasource.password=12345
+spring.jpa.hibernate.ddl-auto=update
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
+spring.jpa.show-sql=true
+logging.level.org.hibernate.SQL=debug
+spring.jpa.properties.hibernate.format_sql=true
+
diff --git a/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/SpringWebappApplicationTests.java b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/SpringWebappApplicationTests.java
new file mode 100644
index 0000000..1f5bc73
--- /dev/null
+++ b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/SpringWebappApplicationTests.java
@@ -0,0 +1,16 @@
+package com.greenfoxacademy.springwebapp;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class SpringWebappApplicationTests {
+
+  @Test
+  public void contextLoads() {
+  }
+
+}
diff --git a/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/hello/HelloControllerIntegrationTest.java b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/hello/HelloControllerIntegrationTest.java
new file mode 100644
index 0000000..6d4c970
--- /dev/null
+++ b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/hello/HelloControllerIntegrationTest.java
@@ -0,0 +1,29 @@
+package com.greenfoxacademy.springwebapp.hello;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
+
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+@AutoConfigureMockMvc
+public class HelloControllerIntegrationTest {
+
+  @Autowired
+  MockMvc mockMvc;
+
+  @Test
+  public void givenHelloURL_whenMockMVC_thenStatusOK_andReturnsWithHelloWorld() throws Exception {
+    mockMvc.perform(MockMvcRequestBuilders.get("/api/hello"))
+        .andExpect(status().isOk())
+        .andExpect(content().string("Hello World!"));
+  }
+}
diff --git a/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/hello/HelloServiceTest.java b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/hello/HelloServiceTest.java
new file mode 100644
index 0000000..dbe462e
--- /dev/null
+++ b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/hello/HelloServiceTest.java
@@ -0,0 +1,26 @@
+package com.greenfoxacademy.springwebapp.hello;
+
+import com.greenfoxacademy.springwebapp.services.HelloServiceImpl;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class HelloServiceTest {
+
+  private HelloServiceImpl helloService;
+
+  @Before
+  public void init() {
+    helloService = new HelloServiceImpl();
+  }
+
+  @Test
+  public void getHelloWorld_ValidExpectedValue_Equals() {
+    Assert.assertEquals("Hello World!", helloService.getHelloWorld());
+  }
+
+  @Test
+  public void getHelloWorld_InvalidExpectedValue_NotEquals() {
+    Assert.assertNotEquals("Hello!", helloService.getHelloWorld());
+  }
+}
diff --git a/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/services/BuildingServiceImplTest.java b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/services/BuildingServiceImplTest.java
new file mode 100644
index 0000000..b3a6f3e
--- /dev/null
+++ b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/services/BuildingServiceImplTest.java
@@ -0,0 +1,7 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class BuildingServiceImplTest {
+
+}
\ No newline at end of file
diff --git a/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/services/BuildingServiceTest.java b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/services/BuildingServiceTest.java
new file mode 100644
index 0000000..14df270
--- /dev/null
+++ b/Johannseniteproba/src/test/java/com/greenfoxacademy/springwebapp/services/BuildingServiceTest.java
@@ -0,0 +1,103 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import com.greenfoxacademy.springwebapp.model.*;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.jupiter.api.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+import static org.hamcrest.CoreMatchers.instanceOf;
+
+import static org.junit.jupiter.api.Assertions.*;
+@RunWith(SpringRunner.class)
+@SpringBootTest
+class BuildingServiceTest {
+
+    @Autowired
+    private BuildingServiceImpl buildingService;
+
+    @Before
+    public void init() {
+        buildingService = new BuildingServiceImpl();
+    }
+
+    @Test
+    public void getTownhall_InvalidExpectedValue_NotEquals() {
+        Townhall townhall = new Townhall();
+        buildingService.startBuilding(townhall);
+        Assert.assertNotEquals(0,(long)townhall.getStarted_at());
+    }
+
+    @Test
+    public void getMine_InvalidExpectedValue_NotEquals() {
+        Mine mine = new Mine();
+        buildingService.startBuilding(mine);
+        Assert.assertNotEquals(0,(long)mine.getStarted_at());
+    }
+
+        @Test
+    public void getFarm_InvalidExpectedValue_NotEquals() {
+        Farm farm = new Farm();
+        buildingService.startBuilding(farm);
+        Assert.assertNotEquals(0,(long)farm.getStarted_at());
+    }
+
+    @Test
+    public void getAcademy_InvalidExpectedValue_NotEquals() {
+        Academy academy = new Academy();
+        buildingService.startBuilding(academy);
+        Assert.assertNotEquals(0,(long)academy.getStarted_at());
+    }
+
+    @Test
+    public void getBuilding_InvalidExpectedValue_NotEquals() {
+        Building building = new Building();
+        buildingService.startBuilding(building);
+        Assert.assertNotEquals(0,(long)building.getStarted_at());
+    }
+
+    @Test
+    public void getBuilding_NotNull(){
+        Building building = new Building();
+        Assert.assertNotNull(building);
+    }
+
+    @Test
+    public void getFarm_Exist(){
+        Farm farm = new Farm();
+        buildingService.startBuilding(farm);
+        farm.setLevel(5);
+        long newFarmId = buildingService.saveFarm(farm);
+        Building building = buildingService.findBuildingById(newFarmId);
+        Assert.assertNotNull(building);
+    }
+
+    @Test
+    public void getBuilding_Exist(){
+        Farm farm = new Farm();
+        buildingService.startBuilding(farm);
+        farm.setLevel(5);
+        long newFarmId = buildingService.saveBuilding(farm);
+        Building building = buildingService.findBuildingById(newFarmId);
+        Assert.assertNotNull(building);
+    }
+
+    @Test
+    public void getTownhall_DoesNotExist(){
+        Farm farm = new Farm();
+        buildingService.startBuilding(farm);
+        farm.setLevel(5);
+        long newFarmId = buildingService.saveBuilding(farm);
+        Building building = buildingService.findBuildingById(newFarmId +1);
+        Assert.assertNull(building);
+    }
+
+    @Test
+    public void getTownhall_WithFactory_Exist(){
+        BuildingFactory buildingFactory = new BuildingFactory();
+        Building newTownhall = buildingFactory.createBuilding(BuildingType.townhall);
+        Assert.assertThat(newTownhall, instanceOf(Townhall.class));
+    }
+}
\ No newline at end of file
diff --git a/Johannseniteproba/src/test/resources/application.properties b/Johannseniteproba/src/test/resources/application.properties
new file mode 100644
index 0000000..4ae3a2a
--- /dev/null
+++ b/Johannseniteproba/src/test/resources/application.properties
@@ -0,0 +1,9 @@
+spring.datasource.url=jdbc:h2:mem:test
+spring.datasource.driverClassName=org.h2.Driver
+spring.datasource.username=szid
+spring.datasource.password=12345
+spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
+
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
+spring.flyway.enabled=false
+
diff --git a/README.md b/README.md
index 935a8db..f0da030 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,4 @@
-# proba
\ No newline at end of file
+# proba
+
+
+változás
diff --git a/proba/week-08/day-1/gradle/wrapper/gradle-wrapper.jar b/proba/week-08/day-1/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..62d4c05
Binary files /dev/null and b/proba/week-08/day-1/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/proba/week-08/day-2/gradle/wrapper/gradle-wrapper.jar b/proba/week-08/day-2/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000..62d4c05
Binary files /dev/null and b/proba/week-08/day-2/gradle/wrapper/gradle-wrapper.jar differ
